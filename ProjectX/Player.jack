class Player {
    field Pair pos, bulletStart;
    static int width;
    static int height;
    static Pair velocity;
    static Pair bulletVelocity;
    field int memAddress;
    field RivalNode rivalIt;
    field bool shouldMove;
    
    constructor Player new(Pair p) {
        let pos = Pair.new(p.getX(), p.getY());
        let shouldMove = true;
        let width = Util.getPersonWidth();
        let height = Util.getPersonHeight();
        let velocity = Pair.new(2, 2);
        let bulletVelocity = Pair.new(Util.bulletSpeed(), 0);
        let bulletStart = Pair.new(pos.getX() + width, pos.getY());
        return this;
    }

    method Pair move(int keyPressed, LinkedListRivals rivals) {
        var Pair newPos;
        let newPos = Pair.new(pos.getX(), pos.getY());
        if(keyPressed = 130) { // left
            do newPos.updateX(-velocity.getX());
            let bulletStart = Pair.new(pos.getX() - Util.getBulletWidth(), pos.getY());
            do bulletVelocity.setX(-Util.bulletSpeed());
            do bulletVelocity.setY(0);
        }
        if(keyPressed = 131) { // up 
            do newPos.updateY(-velocity.getY());
            let bulletStart = Pair.new(pos.getX(), pos.getY() - Util.getBulletHeight());
            do bulletVelocity.setX(0);
            do bulletVelocity.setY(-Util.bulletSpeed());
        }
        if(keyPressed = 132) { // right
            do newPos.updateX(velocity.getX());
            let bulletStart = Pair.new(pos.getX() + width, pos.getY());
            do bulletVelocity.setX(Util.bulletSpeed());
            do bulletVelocity.setY(0);
        }
        if(keyPressed = 133) { // down
            do newPos.updateY(velocity.getY());
            let bulletStart = Pair.new(pos.getX(), pos.getY() + height);
            do bulletVelocity.setX(0);
            do bulletVelocity.setY(Util.bulletSpeed());
        }
        let rivalIt = rivals.getHead();
        while(~(rivalIt = null)) {
            if(inCollision(newPos, rivalIt.getRival())) {
                let shouldMove = false;
                let rivalIt = null;
            }
            else {
                let rivalIt = rivalIt.getNext();
            }
        }
        if(shouldMove) {
            if(~(pos.getX() = newPos.getX()) | ~(pos.getY() = newPos.getY())) {
                do undraw();
            }
            do pos.assign(newPos);
        }
        else {
            let shouldMove = true;
        }
        do draw();
        do newPos.dispose();
        return pos;
    }

    method bool inCollision(Pair p, Rival r) {
        if(((p.getX() + width) > r.getX()) & (p.getX() < (r.getX() + r.getWidth())) & 
           ((p.getY() + height) > r.getY()) & (p.getY() < (r.getY() + r.getHeight()))) {
            return true; 
           }
        return false;
    }

    method void draw() {
        do drawBase(pos.getX(), pos.getY());
        do drawBase(pos.getX() + 2, pos.getY());
        do drawBase(pos.getX(), pos.getY() + 2);
        do drawBase(pos.getX() + 2, pos.getY() + 2);
        return;
    }

    method void drawBase(int x, int y) {
        let memAddress = Util.getScreenAddress() + (Util.scale2Screen(x) / 16) + (Util.scale2Screen(y) * 32);
        do Memory.poke(memAddress+0, -1);
        do Memory.poke(memAddress+32, -21931);
        do Memory.poke(memAddress+64, -11221);
        do Memory.poke(memAddress+96, -22379);
        do Memory.poke(memAddress+128, -12021);
        do Memory.poke(memAddress+160, -24443);
        do Memory.poke(memAddress+192, -16125);
        do Memory.poke(memAddress+224, -30039);
        do Memory.poke(memAddress+256, -27311);
        do Memory.poke(memAddress+288, -16253);
        do Memory.poke(memAddress+320, -24315);
        do Memory.poke(memAddress+352, -12149);
        do Memory.poke(memAddress+384, -22251);
        do Memory.poke(memAddress+416, -11221);
        do Memory.poke(memAddress+448, -21931);
        do Memory.poke(memAddress+480, -1);
        return;
    }
    
    method void undraw() {
        do Util.drawRectangle(pos, width, height, false);
        return;
    }

    method Bullet shoot() {
        var Bullet b;
        let b = Bullet.new(bulletStart, bulletVelocity, true);
        return b;
    }

    method void die() {
        do undraw();
        do velocity.dispose();
        do bulletVelocity.dispose();
        do pos.dispose();
        do Memory.deAlloc(this);
        return;
    }
    
    method Pair getPos() {
        return pos;
    }

    method int getX() {
        return pos.getX();
    }

    method int getY() {
        return pos.getY();
    }

    method int getWidth() {
        return width;
    }

    method int getHeight() {
        return height;
    }

    method void dispose() {
        do pos.dispose();
        do velocity.dispose();
        do bulletVelocity.dispose();
        do Memory.deAlloc(this);
        return;
    }
}