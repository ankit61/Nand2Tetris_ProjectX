class Game {
    field LinkedListBullets bullets;
    field LinkedListRivals rivals;
    field Player player;
    field int i;
    field BulletNode bulletIt, bulletPrev;
    field RivalNode rivalIt, rivalPrev;
    field int gameIteration;
    field Pair temp;
    field Bullet tempBullet;
    field Rival tempRival;
    field int shootingProbability;
    field RandomGenerator random;

    constructor Game new() {
        let player = Player.new(Pair.new(Util.maxX(), Util.maxY() / 2));
        let bullets = LinkedListBullets.new();
        let random = RandomGenerator.new();
        let rivals = LinkedListRivals.new();
        let bullets = BulletsArray.new(200);
        let shootingProbability = 4;
        //do rivals.push(Rival.new(Pair.new(Util.maxX() / 4, Util.maxY() / 5), 100, 0));
        //do rivals.push(Rival.new(Pair.new(Util.maxX() / 4, Util.maxY() * 2 / 5), 5, 5));
        do rivals.push(Rival.new(Pair.new(Util.maxX() / 4, Util.maxY() * 3 / 5), 90, 5));
        //do rivals.push(Rival.new(Pair.new(Util.maxX() / 4, Util.maxY() * 4 / 5), 50, 50));
        return this;
    }

    method void run() {
        var bool done;
        let rivalIt = rivals.getHead();
        while(~(rivalIt = null)) {
            let tempRival = rivalIt.getRival();
            do tempRival.draw();
            let rivalIt = rivalIt.getNext();
        }
        do player.draw();
        while(true) {
            do controlBullets();
            do controlRivals();
            do controlPlayer();
            do Sys.wait(100);
        }
        return;
    }

    method void controlBullets() {
        let bulletIt = bullets.getHead();
        let bulletPrev = null;
        while(~(bulletIt = null)) {
            let tempBullet = bulletIt.getBullet();
            do tempBullet.move();
            if((tempBullet.onEdge()) & (~tempBullet.shouldBounce())) {
                let bulletIt = bullets.erase(bulletPrev);
                let tempBullet = null;
            }
            else {
                let bulletPrev = bulletIt;
                let bulletIt = bulletIt.getNext();       
            }
            if(~(tempBullet = null)) {
                if(tempBullet.inCollisionPlayer(player)) {
                    do gameOver();
                }
                let rivalIt = rivals.getHead();
                let rivalPrev = null;
                while(~(rivalIt = null)) {
                    let tempRival = rivalIt.getRival();
                    if(tempBullet.inCollisionRival(tempRival)) {
                        let rivalIt = rivals.erase(rivalPrev);
                        do tempRival.die();
                    }
                    else {
                        let rivalPrev = rivalIt;
                        let rivalIt = rivalIt.getNext();
                    }
                }
            }
        }
        return;
    }

    method void controlRivals() {
        let rivalIt = rivals.getHead();
        while(~(rivalIt = null)) {
            let tempRival = rivalIt.getRival();
       //     do tempRival.move();
            if(random.generate(0, 100) < shootingProbability) {
                let tempBullet = tempRival.shoot(player.getPos());
                do bullets.push(tempBullet);
                do tempBullet.draw();
            }
            let rivalIt = rivalIt.getNext();
        }
        return;
    }

    method void gameOver() {
        do Output.println();
        do Output.printString("game over");
        do Output.println();
        do Sys.halt();
        return;
    }

    method void controlPlayer() {
        if(Keyboard.keyPressed() = Util.space()) {
            let tempBullet = player.shoot();
            do tempBullet.draw();
            do bullets.push(tempBullet);
        }
        do player.move(Keyboard.keyPressed());
        return;
    }
}