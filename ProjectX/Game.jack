class Game {
    field LinkedListBullets bullets;
    field LinkedListRivals rivals;
    field Player player;
    field int i;
    field BulletNode bulletIt, bulletPrev;
    field RivalNode rivalIt, rivalPrev;
    field int gameIteration;
    field Pair temp;
    field Bullet tempBullet;
    field Rival tempRival;
    field int shootingProbability;
    field RandomGenerator random;

    constructor Game new(int numRivals) {
        let random = RandomGenerator.new();
        let player = Player.new(Pair.new(Util.even(random.generate(Util.minX(), Util.maxX())), random.generate(Util.minY(), Util.maxY())));
        let bullets = LinkedListBullets.new();
        let rivals = LinkedListRivals.new();
        let shootingProbability = 4;
        while(numRivals > 0) {
            do rivals.push(Rival.new(Pair.new(random.generate(Util.minX(), Util.maxX()), random.generate(Util.minY(), Util.maxY())), random.generate(50, 100), random.generate(0, 50), rivals.getSize()));
            let numRivals = numRivals - 1;
        }
        return this;
    }

    method void run() {
        var bool done;
        let rivalIt = rivals.getHead();
        while(~(rivalIt = null)) {
            let tempRival = rivalIt.getRival();
            do tempRival.draw();
            let rivalIt = rivalIt.getNext();
        }
        do player.draw();
        while(true) {
            if(rivals.getSize() = 0) {
                return;
            }
            do controlBullets();
            do controlRivals();
            do controlPlayer();
            do Sys.wait(100);
        }
        return;
    }
    
    method void dispose() {
        do player.dispose();
        do random.dispose();
        do tempBullet.dispose();
        do tempRival.dispose();
        do bulletPrev.dispose();
        do bulletIt.dispose();
        do rivalIt.dispose();
        do rivalPrev.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void controlBullets() {
        let bulletIt = bullets.getHead();
        let bulletPrev = null;
        while(~(bulletIt = null)) {
            let tempBullet = bulletIt.getBullet();
            do tempBullet.move();
            if((tempBullet.onEdge()) & (~tempBullet.shouldBounce())) {
                let bulletIt = bullets.erase(bulletPrev);
                let tempBullet = null;
            }
            else {
                if(tempBullet.inCollisionPlayer(player)) {
                    do gameOver();
                }
                let rivalIt = rivals.getHead();
                let rivalPrev = null;
                while(~(rivalIt = null) & ~(tempBullet = null)) {
                    let tempRival = rivalIt.getRival();
                    if(tempBullet.inCollisionRival(tempRival)) {
                        let rivalIt = rivals.erase(rivalPrev);
                        let bulletIt = bullets.erase(bulletPrev);
                        let tempBullet = null;
                        do tempRival.die();
                    }
                    else {
                        let rivalPrev = rivalIt;
                        let rivalIt = rivalIt.getNext();
                    }
                }
                if(~(tempBullet = null)) {
                    let bulletPrev = bulletIt;
                    let bulletIt = bulletIt.getNext();
                }
            }
                
        }
    return;
    }

    method void controlRivals() {
        let rivalIt = rivals.getHead();
        while(~(rivalIt = null)) {
            let tempRival = rivalIt.getRival();
            //do tempRival.move(rivals);
            /*if(random.generate(0, 100) < shootingProbability) {
                let tempBullet = tempRival.shoot(player.getPos());
                if(tempBullet.onEdge() | ~Util.isValidX(tempBullet.getX()) | ~Util.isValidY(tempBullet.getY())) {
                    do tempBullet.dispose();
                }
                else {
                    do tempBullet.draw();
                    do bullets.push(tempBullet);
                }
            }*/
            let rivalIt = rivalIt.getNext();
        }
        return;
    }

    method void gameOver() {
        do Output.println();
        do Output.printString("game over");
        do Output.println();
        do Sys.halt();
        return;
    }

    method void controlPlayer() {
        if(Keyboard.keyPressed() = Util.space()) {
            let tempBullet = player.shoot();
            if(tempBullet.onEdge() | ~Util.isValidX(tempBullet.getX()) | ~Util.isValidY(tempBullet.getY())) {
                do tempBullet.dispose();
            }
            else {
                do Output.printInt(tempBullet.getX());
                do Output.println();
                do Output.printInt(tempBullet.getY());
                do tempBullet.draw();
                do bullets.push(tempBullet);
            }
        }
        do player.move(Keyboard.keyPressed(), rivals);
        return;
    }
}