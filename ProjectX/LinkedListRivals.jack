class LinkedListRivals {
    field RivalNode head;
    field int sz;
    
    constructor LinkedListRivals new() {
        let head = null;
        let sz = 0;
        return this;
    }

    method void push(Rival t) {
        let head = RivalNode.new(t, head);
        let sz = sz + 1;
        return;
    }

    method RivalNode getHead() {
        return head;
    }

    method int getSize() {
        return sz;
    }

    method RivalNode erase(RivalNode prev) {
        var RivalNode temp;
        if(prev = null) { //deleting head
            if(head = null) {
                do Output.printString("error: deleting from empty list");
                do Sys.halt();
            }
            let temp = head;
            let head = head.getNext();
            do temp.dispose();
        }
        else {
            let temp = prev.getNext();
            do prev.setNext(temp.getNext());
            do temp.dispose();
        }
        let sz = sz - 1;
        if(prev = null) {
            return head;
        }
        return prev.getNext();
    }

    method void print() {
        var RivalNode r;
        let r = head;
        while(~(r = null)) {
            do Output.printInt(r);
            do Output.printString(" ");
            let r = r.getNext();
        }
        do Output.println();
        return;
    }

    method void dispose() {
        do head.dispose();
        do Memory.deAlloc(this);
        return;
    }
}